package controller;

import javafx.scene.control.TextArea;
import javafx.scene.control.Alert.AlertType;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;
import java.util.Set;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import model.MatchManager;
import model.MatchManagerImpl;
import model.Player;
import model.PlayerAI;
import model.ProfileLoader;
import model.SceneName;
import model.WinCondition;
import view.SceneManager;


/**
 *  The Controller related to the matchSettings.fxml GUI.
 *
 */
public final class UIControllerMatchSettings {

    private final Collection<Player> profiles = new ProfileLoader().load();
    private WinCondition selectedWinCondition = WinCondition.ALL_ENEMY_SHIPS_SUNK;

    @FXML
    private Button buttonBack, buttonStart;
    @FXML
    private ChoiceBox<String> choiceboxPlayer1, choiceboxPlayer2, choiceboxGameMode;
    @FXML
    private CheckBox checkboxAI;
    @FXML
    private TextArea textareaDescription;

    /**
     * this method is called automatically when loading the fxml layout. It sets the initial state of the UI
     */
    public void initialize() {
        initChoicebox(choiceboxPlayer1, profiles, x -> x.getName());
        initChoicebox(choiceboxPlayer2, profiles, x -> x.getName());
        initChoicebox(choiceboxGameMode, List.of(WinCondition.values()), x -> x.getName());
        textareaDescription.setText(selectedWinCondition.getDescription());
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonBack() {
        SceneManager.INSTANCE.switchScene(SceneName.MAIN);
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonStart() {
        Player p1 = getSelectedPlayer(choiceboxPlayer1);
        Player p2 = checkboxAI.isSelected() ? new PlayerAI("AI") : getSelectedPlayer(choiceboxPlayer2);
        if (this.arePlayersDistinct(p1, p2)) {
            MatchManager gm = new MatchManagerImpl(Set.of(p1, p2), selectedWinCondition);
            gm.startNewMatch();
        } else {
            alertPlayersNotDistinct();
        }
    }

    /**
     *  The handler for the click events generated by the checkbox.
     */
    @FXML
    public void checkboxAI() {
        choiceboxPlayer2.setDisable(!choiceboxPlayer2.isDisabled());
    }

    /**
     *  The handler for the action events generated by the choicebox.
     */
    @FXML
    public void choiceboxGameMode() {
        selectedWinCondition = WinCondition.getWinConditionFromName(choiceboxGameMode.getSelectionModel().getSelectedItem());
        textareaDescription.setText(selectedWinCondition.getDescription());
    }

    // TEMPORARY
    private Player getSelectedPlayer(final ChoiceBox<String> cb) {
        return profiles.stream()
                .filter(x -> x.getName().equals(cb.getSelectionModel().getSelectedItem()))
                .reduce((a, b) -> {
                    throw new IllegalStateException("Multiple profiles with same name: " + a + ", " + b);
                })
                .get();
    }

    private <T, V> void initChoicebox(final ChoiceBox<T> cb, final Collection<V> c, final Function<V, T> f) {
        for (V elem : c) {
            cb.getItems().add(f.apply(elem));
        }
        cb.getSelectionModel().selectFirst();
        cb.setStyle("-fx-font: 18px \"Serif\";");
    }

    private boolean arePlayersDistinct(final Player p1, final Player p2) {
        return !p1.equals(p2);
    }

    private void alertPlayersNotDistinct() {
        Alert alert = new Alert(AlertType.ERROR);
        alert.setHeaderText(null);
        alert.setTitle("Error!");
        alert.setContentText("Player1 and Player2 cannot be the same!\nChange your selection.");
        alert.showAndWait();
    }
}
