package controller;

import javafx.scene.control.TextArea;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import model.MatchManager;
import model.MatchManagerImpl;
import model.Player;
import model.PlayerAI;
import model.ProfileLoader;
import model.SceneName;
import model.WinCondition;
import view.SceneManager;


/**
 *  The Controller related to the matchSettings.fxml GUI.
 *
 */
public final class UIControllerMatchSettings {
    
    Set<Player> profiles = new ProfileLoader().load();
    
    @FXML
    private Button btBtmm;
    @FXML
    private Button btStrt;
    @FXML
    private ChoiceBox<String> choicebPlayer1;
    @FXML
    private ChoiceBox<String> choicebPlayer2;
    @FXML
    private ChoiceBox<String> choicebGamemode;
    @FXML
    private CheckBox checkbAI;
    @FXML
    private TextArea textareaGameModeDescription;
    
    // this method is called automatically when loading the fxml layout. It sets the initial state of the UI
    public void initialize() {
        for(Player p : profiles) {
            choicebPlayer1.getItems().add(p.getName());
            choicebPlayer2.getItems().add(p.getName());
        }
        for(WinCondition wc : WinCondition.values()) {
            choicebGamemode.getItems().add(wc.getName());
        }
        choicebPlayer1.getSelectionModel().selectFirst();
        choicebPlayer2.getSelectionModel().selectFirst();
        choicebGamemode.getSelectionModel().selectFirst();
        choicebGamemode.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                updateTextareaDescription(WinCondition.getWinConditionFromName(newValue).getDescription());
            }           
        });
        this.updateTextareaDescription(WinCondition.ALL_ENEMY_SHIPS_SUNK.getDescription());
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void btBtmmOnClickHandler() {
        System.out.println("\"Back To Main Menu\" button clicked\n ");
        SceneManager.INSTANCE.switchScene(SceneName.MAIN);
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void btStrtOnClickHandler() {
        System.out.println("\"Start Game\" button clicked\n ");
        Player p1,p2;
        p1 = getSelectedPlayer(choicebPlayer1);
        if(checkbAI.isSelected()) {
            p2 = new PlayerAI("AI");
        } else {
            p2 = getSelectedPlayer(choicebPlayer2);
        }
        new MatchManagerImpl().start(new HashSet<Player>(Arrays.asList(p1,p2)),WinCondition.getWinConditionFromName(choicebGamemode.getSelectionModel().getSelectedItem()));
    }
    
    /**
     *  The handler for the click events generated by the checkbox.
     */
    @FXML
    public void checkbAIonClickHandler() {
        System.out.println("checkbox clicked\n ");
        choicebPlayer2.setDisable(!choicebPlayer2.isDisabled());
    }
    
    private void updateTextareaDescription(String text) {
        this.textareaGameModeDescription.setText(text);
    }
    
    private Player getSelectedPlayer(ChoiceBox<String> cb) {
        return profiles.stream()
                .filter(x -> x.getName().equals(cb.getSelectionModel().getSelectedItem()))
                .reduce((a, b) -> {
                    throw new IllegalStateException("Multiple profiles with same name: " + a + ", " + b);
                })
                .get();
    }

}
