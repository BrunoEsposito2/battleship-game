package controller.ui;

import javafx.scene.control.TextArea;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import controller.players.AccountManager;
import controller.players.AccountOperation;
import controller.players.ArtificialPlayer;
import controller.players.Player;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import model.enums.SceneName;
import model.enums.DialogType;
import model.enums.GameMode;
import model.match.MatchManager;
import model.match.MatchManagerImpl;
import model.profile.AccountLogin;
import view.DialogBuilder;
import view.LoginDialogBuilder;
import view.SceneManager;


/**
 *  The Controller related to the matchSettings.fxml GUI.
 *
 */
public final class MatchSettings {

    private final AccountManager accountManager = new AccountOperation();
    private final Collection<String> usernames = accountManager.getAllUsername(); //TODO update the way profiles are loaded once profile classes are available
    private final LoginDialogBuilder loginDialog = new LoginDialogBuilder();
    private final DialogBuilder dialog = new DialogBuilder();
    private GameMode selectedWinCondition = GameMode.CLASSIC;

    @FXML
    private Button buttonBack, buttonStart;
    @FXML
    private ChoiceBox<String> choiceboxPlayer1, choiceboxPlayer2;
    @FXML
    private ChoiceBox<GameMode> choiceboxGameMode;
    @FXML
    private CheckBox checkboxAI;
    @FXML
    private TextArea textareaDescription;

    /**
     * this method is called automatically when loading the fxml layout. It sets the initial state of the UI
     */
    public void initialize() {
        initChoicebox(choiceboxPlayer1, usernames);
        initChoicebox(choiceboxPlayer2, usernames);
        initChoicebox(choiceboxGameMode, List.of(GameMode.values()));
        textareaDescription.setText(selectedWinCondition.getDescription());
        choiceboxGameMode.getSelectionModel().selectFirst();
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonBack() {
        SceneManager.INSTANCE.switchScene(SceneName.MAIN);
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonStart() {
        /*
        String p1 = getSelectedItem(choiceboxPlayer1);
        String p2 = checkboxAI.isSelected() ? new ArtificialPlayer() : getSelectedItem(choiceboxPlayer2);
        if (p1 == null || p2 == null) {
            dialog.buildAndLaunch(DialogType.ERROR, "Error!", "Some players have no profile selected!\nChange your selection and try again.", null);
        } else if (!arePlayersDistinct(p1, p2)) {
            dialog.buildAndLaunch(DialogType.ERROR, "Error!", "Player1 and Player2 cannot be the same!\nChange your selection and try again.", null);
        } else {
            this.startMatch(p1, p2);
        }
        */
    }

    /**
     *  The handler for the click events generated by the checkbox.
     */
    @FXML
    public void checkboxAI() {
        choiceboxPlayer2.setDisable(!choiceboxPlayer2.isDisabled());
    }

    /**
     *  The handler for the action events generated by the choicebox.
     */
    @FXML
    public void choiceboxGameMode() {
        selectedWinCondition = getSelectedItem(choiceboxGameMode);
        textareaDescription.setText(selectedWinCondition.getDescription());
    }

    private boolean arePlayersDistinct(final Player p1, final Player p2) {
        return !p1.equals(p2);
    }

    private <T> T getSelectedItem(final ChoiceBox<T> cb) {
        return cb.getSelectionModel().getSelectedItem();
    }

    private <T> void initChoicebox(final ChoiceBox<T> cb, final Collection<T> c) {
        c.forEach(x -> cb.getItems().add(x));
        cb.setStyle("-fx-font: 18px \"Serif\";");
        if (!cb.equals(choiceboxGameMode)) {
            cb.getSelectionModel().selectedItemProperty().addListener((x, y, z) -> {
                if (getSelectedItem(cb) != null) {
                    login(cb, (String) getSelectedItem(cb));
                }
            });
        }
    }

    private void startMatch(final Player p1, final Player p2) {
        //TODO adapt this...
        /*
        MatchManager gm = new MatchManagerImpl(Set.of(p1, p2), selectedWinCondition);
        Player winner = gm.startNewMatch();
        dialog.buildAndLaunch(DialogType.INFORMATION, "Match over!", "Player " + winner.getName() + " won the match!\nPress ok to go back to menu.", null);
        */
        SceneManager.INSTANCE.switchScene(SceneName.MAIN);
    }

    private <T> void login(final ChoiceBox<T> cb, final String username) {
        final Optional<String> password = loginDialog.buildAndLaunch(username);
        final boolean isLoginValid = ((password.isPresent()) ?  accountManager.logInAccount(username, password.get()) : false);
        if (isLoginValid) {
            dialog.buildAndLaunch(DialogType.INFORMATION, "Login", "Login successful!", null);
        } else {
            cb.getSelectionModel().clearSelection();
            dialog.buildAndLaunch(DialogType.ERROR, "Login", "Invalid account credentials!", null);
        }
    }

}
