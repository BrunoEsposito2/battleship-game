package controller.ui;

import javafx.scene.control.TextArea;
import javafx.scene.control.Alert.AlertType;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;
import java.util.Set;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ListChangeListener;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import model.enums.SceneName;
import model.enums.GameMode;
import model.match.MatchManager;
import model.match.MatchManagerImpl;
import model.player.Player;
import model.player.PlayerAI;
import model.profile.ProfileLoader;
import model.util.NamedItem;
import view.AlertBuilder;
import view.SceneManager;


/**
 *  The Controller related to the matchSettings.fxml GUI.
 *
 */
public final class MatchSettings {

    private final Collection<Player> profiles = new ProfileLoader().load(); //TODO update the way profiles are loaded once profile classes are available
    private GameMode selectedWinCondition = GameMode.CLASSIC;

    @FXML
    private Button buttonBack, buttonStart;
    @FXML
    private ChoiceBox<NamedItem<Player>> choiceboxPlayer1, choiceboxPlayer2;
    @FXML
    private ChoiceBox<NamedItem<GameMode>> choiceboxGameMode;
    @FXML
    private CheckBox checkboxAI;
    @FXML
    private TextArea textareaDescription;
    @FXML
    private Label labelSamePlayers;

    /**
     * this method is called automatically when loading the fxml layout. It sets the initial state of the UI
     */
    public void initialize() {
        initChoicebox(choiceboxPlayer1, profiles, x -> x.getName());
        initChoicebox(choiceboxPlayer2, profiles, x -> x.getName());
        initChoicebox(choiceboxGameMode, List.of(GameMode.values()), x -> x.getName());
        textareaDescription.setText(selectedWinCondition.getDescription());
        updateSamePlayersLabel();
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonBack() {
        SceneManager.INSTANCE.switchScene(SceneName.MAIN);
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonStart() {
        Player p1 = getSelectedItem(choiceboxPlayer1);
        Player p2 = checkboxAI.isSelected() ? new PlayerAI("AI") : getSelectedItem(choiceboxPlayer2);
        if (!arePlayersDistinct(p1, p2)) {
            AlertBuilder.buildAndLaunch(AlertType.ERROR, "Error!", "Player1 and Player2 cannot be the same!\nChange your selection and try again.", null);
        } else {
            MatchManager gm = new MatchManagerImpl(Set.of(p1, p2), selectedWinCondition);
            gm.startNewMatch();
        }
    }

    /**
     *  The handler for the click events generated by the checkbox.
     */
    @FXML
    public void checkboxAI() {
        choiceboxPlayer2.setDisable(!choiceboxPlayer2.isDisabled());
        if (checkboxAI.isSelected()) {
            labelSamePlayers.setText("");
        } else {
            updateSamePlayersLabel();
        }
    }

    /**
     *  The handler for the action events generated by the choicebox.
     */
    @FXML
    public void choiceboxGameMode() {
        selectedWinCondition = choiceboxGameMode.getSelectionModel().getSelectedItem().getItem();
        textareaDescription.setText(selectedWinCondition.getDescription());
    }

    private boolean arePlayersDistinct(final Player p1, final Player p2) {
        return !p1.equals(p2);
    }

    private <T> T getSelectedItem(final ChoiceBox<NamedItem<T>> cb) {
        return cb.getSelectionModel().getSelectedItem().getItem();
    }

    private <T> void initChoicebox(final ChoiceBox<NamedItem<T>> cb, final Collection<T> c, final Function<T, String> name) {
        for (T elem : c) {
            cb.getItems().add(new NamedItem<T>(name.apply(elem), elem));
        }
        cb.getSelectionModel().selectFirst();
        cb.setStyle("-fx-font: 18px \"Serif\";");
        cb.getSelectionModel().selectedItemProperty().addListener((x, y, z) -> {
            updateSamePlayersLabel();
        }
        );

    }

    private void updateSamePlayersLabel() {
        if (!arePlayersDistinct(getSelectedItem(choiceboxPlayer1), getSelectedItem(choiceboxPlayer2))) {
            labelSamePlayers.setText("Warning: players must use distinct profiles");
        } else {
            labelSamePlayers.setText("");
        }
    }

}
