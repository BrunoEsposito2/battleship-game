package controller.ui.matchsettings;

import javafx.scene.control.TextArea;
import java.util.Optional;
import application.Battleships;
import controller.matchsetup.PlayerCheckerImpl;
import controller.matchsetup.MatchInitializer;
import controller.matchsetup.MatchInitializerImpl;
import controller.matchsetup.PlayerChecker;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import model.enums.PlayerType;
import model.gamemode.GameMode;
import view.scene.SceneName;

/**
 *  The Controller related to the matchSettings.fxml GUI.
 */
public final class MatchSettings {

    private final PlayerChecker playerChecker = new PlayerCheckerImpl();
    private final MatchInitializer matchInitializer = new MatchInitializerImpl();

    @FXML
    private Button buttonBack, buttonStart;
    @FXML
    private ChoiceBox<String> choiceboxPlayer1, choiceboxPlayer2;
    @FXML
    private ChoiceBox<GameMode> choiceboxGameMode;
    @FXML
    private CheckBox checkboxAI;
    @FXML
    private TextArea textareaDescription;

    /**
     * this method is called automatically when loading the fxml layout. It sets the initial state of the UI.
     */
    public void initialize() {
        new MatchSettingsInitializer(this, playerChecker).initialize(choiceboxPlayer1, choiceboxPlayer2, choiceboxGameMode);
        if (choiceboxPlayer1.getItems().isEmpty()) {
            playerChecker.noProfilesAvailable();
        }
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonStart() {
        final Optional<String> username1 = Optional.ofNullable(getSelectedItem(choiceboxPlayer1));
        final Optional<String> username2 = checkboxAI.isSelected() ? Optional.empty() : Optional.ofNullable(getSelectedItem(choiceboxPlayer2));
        if (playerChecker.isPlayerSelectionValid(username1, username2, checkboxAI.isSelected())) {
            matchInitializer.startNewMatch(username1.get(), username2, checkboxAI.isSelected()
                    ? PlayerType.ARTIFICIAL : PlayerType.HUMAN, getSelectedItem(choiceboxGameMode));
        }
    }

    /**
     *  The handler for the click events generated by the checkbox.
     */
    @FXML
    public void checkboxAI() {
        choiceboxPlayer2.setDisable(!choiceboxPlayer2.isDisabled());
    }

    /**
     *  The handler for the click events generated by the button.
     */
    @FXML
    public void buttonBack() {
        Battleships.getController().changeScene(SceneName.MAIN);
    }

    /**
     * sets the displayed gamemode info.
     * @param text - the info to display
     */
    public void setGameModeDescription(final String text) {
        textareaDescription.setText(text);
    }

    /**
     * gets selected item of a choicebox.
     * @param <T> - type of contained item
     * @param cb - choicebox
     * @return the selected item
     */
    public <T> T getSelectedItem(final ChoiceBox<T> cb) {
        return cb.getSelectionModel().getSelectedItem();
    }

}
